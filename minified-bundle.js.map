{
  "version": 3,
  "sources": ["node_modules/cute-socks/index.js", "src/util/imageUtils.js", "src/util/googleCloud.js", "node_modules/cute-util/src/index.js", "src/index.js"],
  "sourcesContent": ["const $ = selector => document.querySelector(selector);\r\nconst $$ = selector => document.querySelectorAll(selector);\r\nmodule.exports = {$, $$};", "// js/imageUtils.js\r\n\r\nasync function compressImage(file) {\r\n    const MAX_SIZE_MB = 3;\r\n    const MB = 1024 * 1024;\r\n\r\n    return new Promise((resolve, reject) => {\r\n        const img = new Image();\r\n        img.onload = () => {\r\n            let quality = 0.8; // Initial compression quality\r\n            const canvas = document.createElement('canvas');\r\n            canvas.width = img.width;\r\n            canvas.height = img.height;\r\n\r\n            const ctx = canvas.getContext('2d');\r\n            ctx.drawImage(img, 0, 0, img.width, img.height);\r\n\r\n            const compress = () => {\r\n                canvas.toBlob((blob) => {\r\n                    if (blob.size / MB <= MAX_SIZE_MB) {\r\n                        resolve(blob); // Size is under 3 MB, resolve the promise\r\n                    } else if (quality > 0.1) {\r\n                        quality -= 0.1; // Decrease quality by 0.1\r\n                        canvas.toBlob(compress, 'image/webp', quality); // Recompress with lower quality\r\n                    } else {\r\n                        // If reached here, unable to compress below 3 MB\r\n                        reject(new Error('Unable to compress image below 3 MB'));\r\n                    }\r\n                }, 'image/webp', quality);\r\n            };\r\n\r\n            compress(); // Start the compression process\r\n        };\r\n\r\n        img.onerror = () => {\r\n            reject(new Error('Image loading error'));\r\n        };\r\n\r\n        const reader = new FileReader();\r\n        reader.onload = (e) => {\r\n            img.src = e.target.result;\r\n        };\r\n        reader.onerror = () => {\r\n            reject(new Error('FileReader error'));\r\n        };\r\n        reader.readAsDataURL(file);\r\n    });\r\n}\r\n\r\nmodule.exports.compressImage = compressImage;\r\n", "async function uploadSockToCloudFunction(dir, fileName, imageBlob, text)\r\n{\r\n    const cloudFunctionUrl = 'https://us-central1-enduring-maxim-411523.cloudfunctions.net/girlsock-directory_image-upload';\r\n\r\n    const imageContent = await toBase64(imageBlob);\r\n    fileName += '.webp';\r\n\r\n    const body = JSON.stringify({\r\n        dir,\r\n        fileName,\r\n        imageContent,\r\n        text\r\n    });\r\n\r\n\r\n    try\r\n    {\r\n        const response = await fetch(cloudFunctionUrl, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body\r\n        });\r\n\r\n        //console.log(response);\r\n\r\n        const responseClone = response.clone();\r\n        return await responseClone;\r\n    }\r\n    catch (error)\r\n    {\r\n        throw new Error(`Network error: ${error.message}`);\r\n    }\r\n}\r\n\r\n\r\nfunction toBase64(file)\r\n{\r\n    return new Promise((resolve, reject) =>\r\n    {\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(file);\r\n        reader.onload = () => resolve(reader.result.split(',')[1]);\r\n        reader.onerror = error => reject(error);\r\n    });\r\n}\r\n\r\nmodule.exports.uploadSockToCloudFunction = uploadSockToCloudFunction;", "/**\r\n * Extracts the last extension from a URI.\r\n * @param {string} uri - The URI from which to extract the extension.\r\n * @returns {string} The last extension of the URI.\r\n */\r\nfunction getLastExtensionFromUri(uri)\r\n{\r\n    let ext = getFileNameFromUri(uri).split('.').pop().toLowerCase();\r\n    return ext ? ext : '';\r\n}\r\n\r\nfunction getFileNameFromUri(uri)\r\n{\r\n    return uri.split('/').pop().split('#')[0].split('?')[0];\r\n}\r\n\r\nfunction getMimeTypeFromUri(uri)\r\n{\r\n    const mimeTypes = {\r\n        '': 'application/octet-stream',\r\n        'jpg': 'image/jpeg',\r\n        'jpeg': 'image/jpeg',\r\n        'png': 'image/png',\r\n        'gif': 'image/gif',\r\n        'bmp': 'image/bmp',\r\n        'tiff': 'image/tiff',\r\n        'mp3': 'audio/mpeg',\r\n        'wav': 'audio/wav',\r\n        'mp4': 'video/mp4',\r\n        'mov': 'video/quicktime',\r\n        'pdf': 'application/pdf',\r\n        'mpeg': 'video/mpeg',\r\n        'mpga': 'audio/mpeg',\r\n        'm4a': 'audio/mp4',\r\n        'webm': 'video/webm',\r\n    };\r\n\r\n    return mimeTypes[getLastExtensionFromUri(uri)];\r\n}\r\n\r\nmodule.exports = {getLastExtension: getLastExtensionFromUri, getMimeTypeFromUri, getFileNameFromUri};", "const {$, $$} = require('cute-socks');\r\n// const {dynamoDBClient} require('./util/awsConfig.js');\r\n// const {getLatestPosts} require('./util/dynamoDbUtils.js');\r\nconst {compressImage} = require('./util/imageUtils.js');\r\nconst {uploadSockToCloudFunction} = require('./util/googleCloud.js');\r\n\r\nconst {getUriExtension, getFileNameFromUri} = require('cute-util');\r\n\r\nconst USER_POSTS_TABLE = \"girlsockdir\"; // DynamoDB Table Name\r\n\r\ndocument.addEventListener('DOMContentLoaded', onDomContentLoad);\r\n\r\n\r\nfunction onDomContentLoad()\r\n{\r\n    $('#post-form-submit').addEventListener('click', async function (event)\r\n    {\r\n        event.preventDefault();\r\n        $('#post-form-submit-loading-modal').style.display = 'block';\r\n        let respo = await submitPost();\r\n        if (respo.ok)\r\n        {\r\n            $('#post-form-submit-loading-modal').style.display = 'none';\r\n        }\r\n    });\r\n}\r\n\r\nasync function submitPost()\r\n{\r\n    const fileInput = $('#post-image');\r\n    const textInput = $('#post-body')?.value;\r\n\r\n    if (fileInput.files.length > 0)\r\n    {\r\n        const compressedImage = await compressImage(fileInput.files[0]);\r\n        const response = await uploadSockToCloudFunction('/th/', getFileNameFromUri(fileInput.files[0].name), compressedImage, textInput);\r\n        console.log(response.ok);\r\n        return response;\r\n\r\n    }\r\n}"],
  "mappings": "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",
  "names": ["require_cute_socks", "__commonJSMin", "exports", "module", "$", "selector", "$$", "require_imageUtils", "__commonJSMin", "exports", "module", "compressImage", "file", "resolve", "reject", "img", "quality", "canvas", "compress", "blob", "reader", "e", "require_googleCloud", "__commonJSMin", "exports", "module", "uploadSockToCloudFunction", "dir", "fileName", "imageBlob", "text", "cloudFunctionUrl", "imageContent", "toBase64", "body", "error", "file", "resolve", "reject", "reader", "require_src", "__commonJSMin", "exports", "module", "getLastExtensionFromUri", "uri", "ext", "getFileNameFromUri", "getMimeTypeFromUri", "$", "$$", "compressImage", "uploadSockToCloudFunction", "getUriExtension", "getFileNameFromUri", "onDomContentLoad", "$", "event", "submitPost", "fileInput", "textInput", "compressedImage", "compressImage", "response", "uploadSockToCloudFunction", "getFileNameFromUri"]
}
